üìù Atividade: Cite ao menos um padr√£o de release e sua utilidade

Cada participante deve produzir um pequeno texto respondendo (texto ou mapa mental) a pergunta:

  ‚Ä¢ Cite ao menos um padr√£o de release e sua utilidade

R.:

Alguns dos padr√µes de release mais utilizados no dia-a-dia s√£o:

‚Ä¢ Blue-Green Deployment: Dois ambientes muito parecidos s√£o provisionados. O primeiro, Blue, tem a vers√£o anterior (est√°vel) implantada nele, e no in√≠cio os usu√°rios s√£o direcionados para ele. O ambiente Green possui a vers√£o mais nova do c√≥digo implantada nele, e no in√≠cio n√£o recebe os usu√°rios. Em algum momento, os usu√°rios passam a ser redirecionados do ambiente Blue para o Green de maneira suave ("seamless") e r√°pida, por√©m o ambiente Blue √© mantido em funcionamento caso seja necess√°ria uma revers√£o (rollback), que tamb√©m ocorreria de maneira r√°pida, por exemplo se alguma falha ou problema for descoberto no novo ambiente (Green). Com o tempo, caso o ambiente novo seja bem recebido pelos usu√°rios, o ambiente antigo (Blue) pode ser descomissionado. Dessa forma, ele estaria livre para receber uma nova vers√£o, alternando assim a denomina√ß√£o Blue-Green entre os dois ambientes, assim como numa rota√ß√£o de culturas agr√≠colas. Uma das principais vantagens desse m√©todo √© que ele minimiza o tempo em que o produto ou servi√ßo atualizado fica fora do ar (downtime), mesmo em caso de rollback para um ambiente anterior (Blue), o que o torna bastante √∫til e eficaz na pr√°tica, apesar de levar a um custo maior de infraestrutura.

‚Ä¢ Canary Release: Acontece de forma muito semelhante ao Blue-Green Deployment, novamente com dois ambientes (digamos Stable para o antigo, e Canary para o novo). No in√≠cio, todos os usu√°rios t√™m acesso apenas ao ambiente antigo (Stable). Ent√£o, uma pequena parcela dos usu√°rios √© redirecionada para o novo ambiente (Canary). Caso ocorra aceita√ß√£o por parte desses usu√°rios, essa porcentagem vai sendo aumentada de maneira incremental e gradativa, at√© que todos os usu√°rios passem para o ambiente Canary, que ent√£o se tornar√° o novo ambiente Stable, e o antigo Stable poder√° ser descomissionado. Por√©m, se for encontrado algum problema com a vers√£o Canary, os usu√°rios podem ser facilmente revertidos para o ambiente Stable antigo, sem downtime do servi√ßo. Assim como no Blue-Green deployment, uma das principais vantagens desse m√©todo √© que ele minimiza o tempo em que o produto ou servi√ßo atualizado fica fora do ar (downtime), mesmo em caso de rollback para um ambiente anterior (Blue). Outra vantagem, n√£o presente no Blue-Green deployment, √© que caso ocorra um problema na nova vers√£o, apenas uma parcela dos usu√°rios ser√° afetada, o que tamb√©m o torna bastante √∫til e eficaz na pr√°tica enquanto minimiza os riscos da nova vers√£o, apesar de tamb√©m levar a um custo maior de infraestrutura, e de complexidade na implanta√ß√£o nessa infraestrutura de diferentes fluxos de tr√°fego para diferentes usu√°rios.

‚Ä¢ Feature Toggles: Consistem na implanta√ß√£o condicional de funcionalidades, em que elas podem estar habilitadas ou n√£o conforme uma condi√ß√£o estabelecida. Isso pode ser implementado por meio de if-else ou de switch-case, ou de funcionalidades semelhantes conforme a linguagem de programa√ß√£o escolhida. Isso tem como vantagem permitir habilitar ou desabilitar de forma f√°cil e simples determinadas funcionalidades, por exemplo para usu√°rios experimentais (beta-testers), habilitar ou n√£o conforme as configura√ß√µes do usu√°rio. Outra vantagem √© permitir a implementa√ß√£o de novas funcionalidades de forma incremental e com baixo risco, sendo elas habilitadas apenas quando estiverem prontas. Por√©m, conforme o n√∫mero de Feature Toggles cresce, algumas delas inevitavelmente ter√£o de ser removidas a fim de reduzir a complexidade e auxiliar na manutenibilidade do software. Al√©m disso, a intera√ß√£o entre diferentes Feature Toggles pode aumentar a complexidade dos testes e ocorrer de forma inesperada.
